# DO NOT EDIT THIS FILE
import unittest
import json
from multiprocessing import Process, Manager
from time import process_time
import os
import jsonify as jsonify
import requests

from Question1 import question01
from Question2 import question02
from Question3 import question03
from Question4 import question04
from Question5 import question05
from Question6 import question06


class Test(unittest.TestCase):

    def test_runq1_main(self):
        travis_uuid = os.getenv('travis_uuid', '')
        if travis_uuid == '':
            tests = requests.get(url='https://cscc-gl.herokuapp.com/tests/run/1').json()
            response = []
            for testnumber in range(0, len(tests)):
                try:
                    return_dict = Manager().dict()
                    test = tests[testnumber]
                    q1input = test["input"]
                    p = Process(target=runq1, args=(q1input, return_dict))
                    p.start()

                    # Wait for 1 seconds or until process finishes
                    p.join(1)

                    # If thread is still active
                    if p.is_alive():
                        # Terminate
                        print(
                            "A question 1 test has timed out. Each individual test has a maximum of one second to run.")
                        p.terminate()
                        p.join()
                    else:
                        correct = return_dict['output'] == test["output"]
                        response.append({
                            "questionNumber": 1,
                            "testNumber": testnumber,
                            "correct": correct,
                            "speed": return_dict['diff'] * 1000000000
                        })
                except Exception as e:
                    print(e)
            wrong = len([item for item in response if item['correct'] is False])
            if wrong > 0:
                raise AssertionError("You have failed %d cases" % wrong)

        if travis_uuid != '':
            requests.post('https://cscc-gl.herokuapp.com/answer/contestant/' + travis_uuid + '/1',
                          data=jsonify(response))

    def test_runq2_main(self):
        travis_uuid = os.getenv('travis_uuid', '')
        if travis_uuid == '':
            tests = requests.get('https://cscc-gl.herokuapp.com/tests/run/2/').json()
            response = []
            for testnumber in range(0, len(tests)):
                try:
                    return_dict = Manager().dict()
                    test = tests[testnumber]
                    q2input = test["input"]
                    p = Process(target=runq2, args=(q2input, return_dict))
                    p.start()

                    # Wait for 1 seconds or until process finishes
                    p.join(1)

                    # If thread is still active
                    if p.is_alive():
                        # Terminate
                        print(
                            "A question 2 test has timed out. Each individual test has a maximum of one second to run.")
                        p.terminate()
                        p.join()
                    else:
                        correct = return_dict['output'] == test["output"]
                        response.append({
                            "questionNumber": 2,
                            "testNumber": testnumber,
                            "correct": correct,
                            "speed": return_dict['diff'] * 1000000000
                        })
                except Exception as e:
                    print(e)
        wrong = len([item for item in response if item['correct'] is False])
        if wrong > 0:
            raise AssertionError("You have failed %d cases" % wrong)
        if travis_uuid != '':
            requests.post('https://cscc-gl.herokuapp.com/answer/contestant/' + travis_uuid + '/2',
                          data=jsonify(response))

    def test_runq3_main(self):
        travis_uuid = os.getenv('travis_uuid', '')
        if travis_uuid == '':
            tests = requests.get('https://cscc-gl.herokuapp.com/tests/run/3/').json()
            response = []
            for testnumber in range(0, len(tests)):
                try:
                    return_dict = Manager().dict()
                    test = tests[testnumber]
                    q3input = test["input"]
                    p = Process(target=runq3, args=(q3input, return_dict))
                    p.start()

                    # Wait for 1 seconds or until process finishes
                    p.join(1)

                    # If thread is still active
                    if p.is_alive():
                        # Terminate
                        print(
                            "A question 3 test has timed out. Each individual test has a maximum of one second to run.")
                        p.terminate()
                        p.join()
                    else:
                        correct = return_dict['output'] == test["output"]
                        response.append({
                            "questionNumber": 3,
                            "testNumber": testnumber,
                            "correct": correct,
                            "speed": return_dict['diff'] * 1000000000
                        })
                except Exception as e:
                    print(e)
        wrong = len([item for item in response if item['correct'] is False])
        if wrong > 0:
            raise AssertionError("You have failed %d cases" % wrong)
        if travis_uuid != '':
            requests.post('https://cscc-gl.herokuapp.com/answer/contestant/' + travis_uuid + '/3',
                          data=jsonify(response))

    def test_runq4_main(self):
        travis_uuid = os.getenv('travis_uuid', '')
        if travis_uuid == '':
            tests = requests.get('https://cscc-gl.herokuapp.com/tests/run/4/').json()
            response = []
            for testnumber in range(0, len(tests)):
                try:
                    return_dict = Manager().dict()
                    test = tests[testnumber]
                    q4input = test["input"]
                    p = Process(target=runq4, args=(q4input, return_dict))
                    p.start()

                    # Wait for 1 seconds or until process finishes
                    p.join(1)

                    # If thread is still active
                    if p.is_alive():
                        # Terminate
                        print(
                            "A question 4 test has timed out. Each individual test has a maximum of one second to run.")
                        p.terminate()
                        p.join()
                    else:
                        correct = return_dict['output'] == test["output"]
                        response.append({
                            "questionNumber": 4,
                            "testNumber": testnumber,
                            "correct": correct,
                            "speed": return_dict['diff'] * 1000000000
                        })
                except Exception as e:
                    print(e)
        wrong = len([item for item in response if item['correct'] is False])
        if wrong > 0:
            raise AssertionError("You have failed %d cases" % wrong)
        if travis_uuid != '':
            requests.post('https://cscc-gl.herokuapp.com/answer/contestant/' + travis_uuid + '/4',
                          data=jsonify(response))

    def test_runq5_main(self):
        travis_uuid = os.getenv('travis_uuid', '')
        if travis_uuid == '':
            tests = requests.get('https://cscc-gl.herokuapp.com/tests/run/5/').json()
            response = []
            for testnumber in range(0, len(tests)):
                try:
                    return_dict = Manager().dict()
                    test = tests[testnumber]
                    q6input = test["input"]
                    p = Process(target=runq5, args=(q6input, return_dict))
                    p.start()

                    # Wait for 1 seconds or until process finishes
                    p.join(1)

                    # If thread is still active
                    if p.is_alive():
                        # Terminate
                        print(
                            "A question 5 test has timed out. Each individual test has a maximum of one second to run.")
                        p.terminate()
                        p.join()
                    else:
                        correct = return_dict['output'] == test["output"]
                        response.append({
                            "questionNumber": 5,
                            "testNumber": testnumber,
                            "correct": correct,
                            "speed": return_dict['diff'] * 1000000000
                        })
                except Exception as e:
                    print(e)
        wrong = len([item for item in response if item['correct'] is False])
        if wrong > 0:
            raise AssertionError("You have failed %d cases" % wrong)
        if travis_uuid != '':
            requests.post('https://cscc-gl.herokuapp.com/answer/contestant/' + travis_uuid + '/5',
                          data=jsonify(response))

    def test_runq6_main(self):
        travis_uuid = os.getenv('travis_uuid', '')
        if travis_uuid == '':
            tests = requests.get('https://cscc-gl.herokuapp.com/tests/run/6/').json()
            response = []
            for testnumber in range(0, len(tests)):
                try:
                    return_dict = Manager().dict()
                    test = tests[testnumber]
                    q6input = test["input"]
                    p = Process(target=runq6, args=(q6input, return_dict))
                    p.start()

                    # Wait for 1 seconds or until process finishes
                    p.join(1)

                    # If thread is still active
                    if p.is_alive():
                        # Terminate
                        print(
                            "A question 6 test has timed out. Each individual test has a maximum of one second to run.")
                        p.terminate()
                        p.join()
                    else:
                        correct = return_dict['output'] == test["output"]
                        response.append({
                            "questionNumber": 6,
                            "testNumber": testnumber,
                            "correct": correct,
                            "speed": return_dict['diff'] * 1000000000
                        })
                except Exception as e:
                    print(e)
        wrong = len([item for item in response if item['correct'] is False])
        if wrong > 0:
            raise AssertionError("You have failed %d cases" % wrong)
        if travis_uuid != '':
            requests.post('https://cscc-gl.herokuapp.com/answer/contestant/' + travis_uuid + '/6',
                          data=jsonify(response))


# DO NOT CHANGE THIS FUNCTION EITHER
def runq1(q1input, return_dict):
    start = process_time()
    i = json.loads(q1input.replace(" ", ""))
    output = question01(i['initialLevelOfDebt'], i['interestPercentage'], i['repaymentPercentage'])
    end = process_time()
    diff = end - start
    return_dict['output'] = output
    return_dict['diff'] = diff


# DO NOT CHANGE THIS FUNCTION EITHER
def runq2(q2input, return_dict):
    start = process_time()
    i = json.loads(q2input.replace(" ", ""))
    output = question02(i['risk'], i['bonus'], i['trader'])
    end = process_time()
    diff = end - start
    return_dict['output'] = output
    return_dict['diff'] = diff


# DO NOT CHANGE THIS FUNCTION EITHER
def runq3(q3input, return_dict):
    start = process_time()
    i = json.loads(q3input.replace(" ", ""))
    output = question03(i['scores'], ['alice'])
    end = process_time()
    diff = end - start
    return_dict['output'] = output
    return_dict['diff'] = diff


# DO NOT CHANGE THIS FUNCTION EITHER
def runq4(q4input, return_dict):
    start = process_time()
    i = json.loads(q4input.replace(" ", ""))
    output = question04(i['v'], i['c'], i['mc'])
    end = process_time()
    diff = end - start
    return_dict['output'] = output
    return_dict['diff'] = diff


# DO NOT CHANGE THIS FUNCTION EITHER
def runq5(q5input, return_dict):
    start = process_time()
    i = json.loads(q5input.replace(" ", ""))
    output = question05(i)
    end = process_time()
    diff = end - start
    return_dict['output'] = output
    return_dict['diff'] = diff


# DO NOT CHANGE THIS FUNCTION EITHER
def runq6(q6input, return_dict):
    start = process_time()
    # i = json.loads(q6input)
    output = question06(q6input)
    end = process_time()
    diff = end - start
    return_dict['output'] = output
    return_dict['diff'] = diff


if __name__ == '__main__':
    unittest.main()
